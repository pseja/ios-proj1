#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_ALL="C"
set -e

print_help() {
    echo "Usage: xtf [-h|--help] [FILTER] [COMMAND] USER LOG [LOG2 [...]"
    echo "-h|--help - shows help"
    echo "FILTERS: "
    echo "    -a DATETIME"
    echo "    -b DATETIME"
    echo "    -c CURRENCY"
    echo "COMMANDS: "
    echo "    list"
    echo "    list-currency"
    echo "    status"
    echo "    profit"
}

check_datetime_format() {
    if date -d "$1" "+%Y-%m-%d %H:%M:%S" >/dev/null; then
        return 0
    else
        echo "Invalid DATETIME format." >&2
        echo ""
        exit 1
    fi
}

parse_arguments() {
    COMMAND=""
    USER=""

    COMMAND_COUNTER=0
    FLAG_A_USED=0
    FLAG_B_USED=0

    # parsing arguments
    while [ "$#" -gt 0 ]; do
        case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;

        -a)
            if [ "$FLAG_A_USED" -eq 1 ]; then
                echo "Invalid amount of -a flags." >&2
                exit 2
            fi
            check_datetime_format "$2"
            AFTER_TIME="$2"
            FLAG_A_USED=1
            shift 2
            ;;

        -b)
            if [ "$FLAG_B_USED" -eq 1 ]; then
                echo "Invalid amount of -b flags." >&2
                exit 2
            fi
            check_datetime_format "$2"
            BEFORE_TIME="$2"
            FLAG_B_USED=1
            shift 2
            ;;

        -c)
            CURRENCY="$2 $CURRENCY"
            shift 2
            ;;

        list | list-currency | status | profit)
            COMMAND_COUNTER=$((COMMAND_COUNTER + 1))

            if [ "$COMMAND_COUNTER" -gt 1 ]; then
                echo "Invalid amount of commands." >&2
                exit 2
            fi

            COMMAND="$1"
            shift
            ;;

        *.gz)
            LOG_INPUT="${LOG_INPUT}\n$(gzip -d -c "$1")"
            shift
            ;;

        *)
            if [ -z "$USER" ]; then
                USER="$1"
            else
                if ! LOG_INPUT="${LOG_INPUT}\n$(cat "$1")"; then
                    echo "" && echo "Error reading file $1" >&2
                    exit 4
                fi
            fi
            shift
            ;;
        esac
    done

    if [ -z "$USER" ]; then
        echo "No user specified." >&2
        exit 3
    fi

    if [ -z "$LOG_INPUT" ]; then
        echo "No file loaded from input." >&2
        exit 4
    fi

}

check_logs_format() {
    if ! printf "%s\n" "$LOG_INPUT" | while IFS=';' read -r user datetime currency value; do
        if [ -z "$user" ]; then
            echo "No user specified in logs." >&2
            exit 1
        fi

        if [ -z "$datetime" ]; then
            echo "No datetime specified in logs." >&2
            exit 2
        else
            check_datetime_format "$datetime"
        fi

        if ! echo "$currency" | grep -qE "^[A-Z]{3}$"; then
            echo "Invalid currency format in logs." >&2
            exit 3
        fi

        if ! echo "$value" | grep -Eq "^(-?[0-9]+(\.[0-9]+))$"; then
            echo "Invalid price format in logs." >&2
            exit 4
        fi

    done; then
        exit 5
    fi
}

filter_input() {
    # LIST=$(echo "$LOG_INPUT" | awk -F ";" -v inputuser="$USER" "{
    #     error = 0
    #     user = \$1
    #     datetime = \$2
    #     currency = \$3
    #     price = \$4

    #     if (length(user) == 0)
    #     {
    #         error = 1
    #         exit error
    #     }

    #     if (length(datetime) == 0 || datetime !~ /^[0-9]{4}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$/)
    #     {
    #         error = 2
    #         exit error
    #     }

    #     if (length(currency) == 0 || currency !~ /^[A-Z]{3}$/)
    #     {
    #         error = 3
    #         exit error
    #     }

    #     if (length(price) == 0 || price !~ /^([+-]?[0-9]+(\.[0-9]+))$/)
    #     {
    #         error = 4
    #         exit error
    #     }

    #     if (\$1 == inputuser)
    #     {
    #         printf \"%s\n\", \$0
    #     }
    # } END {
    #     # TODO FIGURE THIS SHIT OUT
    #     if (error != 0)
    #     {
    #         print error > \"/dev/stderr\"
    #     }
    # }")

    LIST=$(
        echo "$LOG_INPUT" | awk -F ";" -v user="$USER" -v after_time="$AFTER_TIME" -v before_time="$BEFORE_TIME" -v currency="$CURRENCY" "BEGIN {
        split(currency, currencies, \" \")
    }
    {
        if (\$1 == user && (after_time == \"\" || \$2 > after_time) && (before_time == \"\" || \$2 < before_time))
        {
            if (currency == \"\")
            {
                printf \"%s\n\", \$0
            }
            else
            {
                for (i in currencies)
                {
                    if (\$3 == currencies[i])
                    {
                        printf \"%s\n\", \$0
                    }
                }
            }
        }
    }"
    )

    # if list is empty dont go through commands or it'll break
    if [ -z "$LIST" ]; then
        echo ""
        exit 0
    fi
}

show_output() {
    case "$COMMAND" in
    list | "")
        echo "$LIST"
        ;;

    list-currency)
        echo "$LIST" | awk -F ";" "{
        print \$3
    }" | sort | uniq
        ;;

    status)
        echo "$LIST" | awk -F ";" "{
        currency = \$3
        currency_value = \$4

        currencies[currency] += currency_value
        }
        END {
            for (currency in currencies)
            {
                printf \"%s : %.4f\n\", currency, currencies[currency] | \"sort\"
            }
    }"
        ;;

    profit)
        echo "$LIST" | awk -F ";" -v xtf_profit="${XTF_PROFIT:-20}" "{
        currency = \$3
        currency_value = \$4

        if (currency_value > 0)
        {
            currencies[currency] += currency_value + (currency_value * xtf_profit / 100)
        }
        else
        {
            currencies[currency] += currency_value
        }

        }
        END {
            for (currency in currencies)
            {
                printf \"%s : %.4f\n\", currency, currencies[currency] | \"sort\"
            }
    }"
        ;;
    esac
}

main() {
    parse_arguments "$@"
    check_logs_format
    filter_input
    show_output
    exit 0
}

main "$@"
