#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help() {
    echo "Usage: xtf [-h|--help] [FILTER] [COMMAND] USER LOG [LOG2 [...]"
    echo "-h|--help - shows help"
    echo "FILTERS: "
    echo "    -a DATETIME"
    echo "    -b DATETIME"
    echo "    -c CURRENCY"
    echo "COMMANDS: "
    echo "    list"
    echo "    list-currency"
    echo "    status"
    echo "    profit"
}

check_datetime_format() {
    if expr "$1" : "^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}$" >/dev/null; then
        return 0
    else
        echo "Invalid DATETIME format." >&2
        exit 1
    fi
}

FILTER=""
COMMAND=""
USER=""
LOGS=""
ZIPPED_LOGS=""

COMMAND_COUNTER=0

# parsing arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
    -h | --help)
        print_help
        exit 0
        ;;

    -a | -b | -c)
        if [ "$1" != "-c" ]; then
            check_datetime_format "$2"
        fi

        FILTER="$1 $2 $FILTER"
        shift 2
        ;;

    list | list-currency | status | profit)
        COMMAND_COUNTER=$((COMMAND_COUNTER + 1))

        if [ "$COMMAND_COUNTER" -gt 1 ]; then
            echo "Invalid amount of commands." >&2
            exit 2
        fi

        COMMAND="$1"
        shift
        ;;

    *.log | *.log.gz)
        while [ "$#" -gt 0 ]; do
            case "$1" in
            *.gz)
                ZIPPED_LOGS="$1 $ZIPPED_LOGS"
                ;;
            *)
                LOGS="$1 $LOGS"
                ;;
            esac
            shift
        done
        ;;

    *)
        USER="$1"
        shift
        ;;
    esac
done

if [ -z "$USER" ]; then
    echo "No user specified." >&2
    exit 3
fi

# put all logs into a single LOG_INPUT variable
for log in $LOGS; do
    if [ -f "$log" ]; then
        LOG_INPUT="${LOG_INPUT}$(cat "$log")"
    fi
done

for gz_log in $ZIPPED_LOGS; do
    if [ -f "$gz_log" ]; then
        LOG_INPUT="${LOG_INPUT}\n$(gzip -d -c "$gz_log")"
    fi
done

# separate filters into their respective variables
AFTER_TIME=$(echo "$FILTER" | awk -F " " "{
    for (i = 1; i <= NF; i++)
        if (\$i == \"-a\")
        {
            printf \$(i+1) \" \" \$(i+2)
        }
    }")

BEFORE_TIME=$(echo "$FILTER" | awk -F " " "{
    for (i = 1; i <= NF; i++)
        if (\$i == \"-b\")
        {
            printf \$(i+1) \" \" \$(i+2)
        }
    }")

CURRENCY=$(echo "$FILTER" | awk -F " " "{
    for (i = 1; i <= NF; i++)
        if (\$i == \"-c\")
        {
            currencies = (currencies == \"\") ? \$(i+1) : currencies \" \" \$(i+1)
        }
    }
    END {
        print currencies
    }")

# filter input to only include the lines with the specified user
# then filter based on the input filters
LIST=$(echo "$LOG_INPUT" | awk -F ";" -v user="$USER" "{
    if (\$1 == user)
    {
        printf \"%s\n\", \$0
    }
}")

if [ -n "$AFTER_TIME" ]; then
    LIST=$(echo "$LIST" | awk -F ";" -v after_time="$AFTER_TIME" "{
        if (\$2 > after_time)
        {
            printf \"%s\n\", \$0
        }
    }")
fi

if [ -n "$BEFORE_TIME" ]; then
    LIST=$(echo "$LIST" | awk -F ";" -v before_time="$BEFORE_TIME" "{
        if (\$2 < before_time)
        {
            printf \"%s\n\", \$0
        }
    }")
fi

if [ -n "$CURRENCY" ]; then
    LIST=$(echo "$LIST" | awk -F ";" -v currency="$CURRENCY" "BEGIN {
        split(currency, currencies, \" \")
    }
    {
        for (i in currencies)
        {
            if (\$3 == currencies[i])
            {
                printf \"%s\n\", \$0; break
            }
        }
    }")
fi

# if list is empty dont go through commands or it'll break
if [ -z "$LIST" ]; then
    echo ""
    exit 0
fi

# show output based on command
case "$COMMAND" in
list | "")
    echo "$LIST"
    ;;
list-currency)
    echo "$LIST" | awk -F ";" "{
        print \$3
    }" | sort | uniq
    ;;
status)
    echo "$LIST" | awk -F ";" "{
        currency = \$3
        currency_value = \$4

        currencies[currency] += currency_value
        }
        END {
            for (currency in currencies)
            {
                printf \"%s : %.4f\n\", currency, currencies[currency] | \"sort\"
            }
    }"
    ;;
profit)
    echo "$LIST" | awk -F ";" -v xtf_profit="${XTF_PROFIT:-20}" "{
        currency = \$3
        currency_value = \$4

        if (currency_value > 0)
        {
            currencies[currency] += currency_value + (currency_value * xtf_profit / 100)
        }
        else
        {
            currencies[currency] += currency_value
        }

        }
        END {
            for (currency in currencies)
            {
                printf \"%s : %.4f\n\", currency, currencies[currency] | \"sort\"
            }
    }"
    ;;
esac

exit 0
