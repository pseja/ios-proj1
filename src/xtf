#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_ALL="C"

print_help() {
    echo "Usage: xtf [-h|--help] [FILTER] [COMMAND] USER LOG [LOG2 [...]"
    echo "-h|--help - shows help"
    echo "FILTERS: "
    echo "    -a DATETIME"
    echo "    -b DATETIME"
    echo "    -c CURRENCY"
    echo "COMMANDS: "
    echo "    list"
    echo "    list-currency"
    echo "    status"
    echo "    profit"
}

check_datetime_format() {
    if echo "$1" | grep -E "^[0-9]{4}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$" >/dev/null && date -d "$1" "+%Y-%m-%d %H:%M:%S" >/dev/null; then
        return 0
    else
        echo "Invalid DATETIME format." >&2
        echo ""
        exit 1
    fi
}

parse_arguments() {
    COMMAND=""
    USER=""

    COMMAND_COUNTER=0
    FLAG_A_USED=0
    FLAG_B_USED=0

    # parsing arguments
    while [ "$#" -gt 0 ]; do
        case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;

        -a)
            if [ "$FLAG_A_USED" -eq 1 ]; then
                echo "Invalid amount of -a flags." >&2
                exit 2
            fi
            check_datetime_format "$2"
            AFTER_TIME="$2"
            FLAG_A_USED=1
            shift 2
            ;;

        -b)
            if [ "$FLAG_B_USED" -eq 1 ]; then
                echo "Invalid amount of -b flags." >&2
                exit 2
            fi
            check_datetime_format "$2"
            BEFORE_TIME="$2"
            FLAG_B_USED=1
            shift 2
            ;;

        -c)
	    if ! expr "$2" : "[A-Z]\{3\}$" > /dev/null; then
                echo "Invalid input currency format." >&2
                exit 2
            else
                CURRENCY="$2 $CURRENCY"
                shift 2
            fi
            ;;

        list | list-currency | status | profit)
            COMMAND_COUNTER=$((COMMAND_COUNTER + 1))

            if [ "$COMMAND_COUNTER" -gt 1 ]; then
                echo "Invalid amount of commands." >&2
                exit 2
            fi

            COMMAND="$1"
            shift
            ;;

        *.gz)
            LOG_INPUT="${LOG_INPUT}\n$(zcat "$1")"
            shift
            ;;

        *)
            if [ -z "$USER" ]; then
                USER="$1"
            else
                if ! LOG_INPUT="${LOG_INPUT}\n$(cat "$1")"; then
                    echo "" && echo "Error reading file $1" >&2
                    exit 4
                fi
            fi
            shift
            ;;
        esac
    done

    if [ -z "$USER" ]; then
        echo "No user specified." >&2
        exit 3
    fi

    if [ -z "$LOG_INPUT" ]; then
        echo "No file loaded from input." >&2
        exit 4
    fi

}

check_format_and_filter_input() {
    LIST=$(
        echo "$LOG_INPUT" | awk -F ";" -v user="$USER" -v after_time="$AFTER_TIME" -v before_time="$BEFORE_TIME" -v currency="$CURRENCY" "BEGIN {
        split(currency, currencies, \" \")
    }
    {
        # skip first line which is somehow always empty to avoid false positives
        if (NR < 2)
        {
            next
        }

        _user = \$1
        _datetime = \$2
        _currency = \$3
        _price = \$4

        # DEBUG PRINT
        # printf \"User: '%s', Datetime: '%s', Currency: '%s', Price: '%s'\n\", _user, _datetime, _currency, _price > \"/dev/stderr\";

        if (!length(_user))
        {
            printf \"User is missing in logs.\n\" > \"/dev/stderr\"
            exit 1
        }

        if (!length(_datetime) || _datetime !~ /^[0-9]{4}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$/)
        {
            printf \"Datetime is missing or in incorrect format in logs.\n\" > \"/dev/stderr\"
            exit 2
        }

        if (!length(_currency) || _currency !~ /^[A-Z]{3}$/)
        {
            printf \"Currency is missing or in incorrect format in logs.\n\" > \"/dev/stderr\"
            exit 3
        }

        if (!length(_price) || _price !~ /^([+-]?[0-9]+(\.[0-9]+))$/)
        {
            printf \"Price is missing or in incorrect format in logs.\n\" > \"/dev/stderr\"
            exit 4
        }

        if (\$1 == user && (after_time == \"\" || \$2 > after_time) && (before_time == \"\" || \$2 < before_time))
        {
            if (currency == \"\")
            {
                printf \"%s\n\", \$0
            }
            else
            {
                for (i in currencies)
                {
                    if (\$3 == currencies[i])
                    {
                        printf \"%s\n\", \$0
                    }
                }
            }
        }
    }"
    )

    error="$?"

    if [ "$error" -ne 0 ]; then
        echo ""
        exit "$error"
    fi

    # if list is empty dont go through commands or it'll break
    # (this is inteded :D)
    if [ -z "$LIST" ]; then
        echo ""
        exit 0
    fi
}

show_output() {
    case "$COMMAND" in
    list | "")
        echo "$LIST"
        ;;

    list-currency)
        echo "$LIST" | awk -F ";" "{
        print \$3
    }" | sort | uniq
        ;;

    status)
        echo "$LIST" | awk -F ";" "{
        currency = \$3
        currency_value = \$4

        currencies[currency] += currency_value
        }
        END {
            for (currency in currencies)
            {
                printf \"%s : %.4f\n\", currency, currencies[currency] | \"sort\"
            }
    }"
        ;;

    profit)
        echo "$LIST" | awk -F ";" -v xtf_profit="${XTF_PROFIT:-20}" "{
        currency = \$3
        currency_value = \$4

        if (currency_value > 0)
        {
            currencies[currency] += currency_value + (currency_value * xtf_profit / 100)
        }
        else
        {
            currencies[currency] += currency_value
        }

        }
        END {
            for (currency in currencies)
            {
                printf \"%s : %.4f\n\", currency, currencies[currency] | \"sort\"
            }
    }"
        ;;
    esac
}

main() {
    parse_arguments "$@"
    check_format_and_filter_input
    show_output
    exit 0
}

main "$@"
